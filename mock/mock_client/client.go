// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock_client

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Do provides a mock function with given fields: request
func (_m *Client) Do(request *http.Request) (*http.Response, error) {
	ret := _m.Called(request)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *Client) Get(_a0 string) (*http.Response, error) {
	ret := _m.Called(_a0)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostForm provides a mock function with given fields: uri, data
func (_m *Client) PostForm(uri string, data url.Values) (*http.Response, error) {
	ret := _m.Called(uri, data)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, url.Values) *http.Response); ok {
		r0 = rf(uri, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, url.Values) error); ok {
		r1 = rf(uri, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
